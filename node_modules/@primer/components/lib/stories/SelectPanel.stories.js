"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiSelectStory = MultiSelectStory;
exports.SingleSelectStory = SingleSelectStory;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = require("..");

var _BaseStyles = _interopRequireDefault(require("../BaseStyles"));

var _DropdownMenu = require("../DropdownMenu");

var _SelectPanel = require("../SelectPanel");

var _BorderBox = _interopRequireDefault(require("../BorderBox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const meta = {
  title: 'Composite components/SelectPanel',
  component: _SelectPanel.SelectPanel,
  decorators: [Story => {
    return /*#__PURE__*/_react.default.createElement(_.ThemeProvider, {
      theme: _.theme
    }, /*#__PURE__*/_react.default.createElement(_BaseStyles.default, null, /*#__PURE__*/_react.default.createElement(Story, null)));
  }],
  parameters: {
    controls: {
      disable: true
    }
  }
};
var _default = meta;
exports.default = _default;

function getColorCircle(color) {
  return function () {
    return /*#__PURE__*/_react.default.createElement(_BorderBox.default, {
      bg: color,
      borderColor: color,
      width: 14,
      height: 14,
      borderRadius: 10,
      margin: "auto"
    });
  };
}

const items = [{
  leadingVisual: getColorCircle('#a2eeef'),
  text: 'enhancement',
  id: 1
}, {
  leadingVisual: getColorCircle('#d73a4a'),
  text: 'bug',
  id: 2
}, {
  leadingVisual: getColorCircle('#0cf478'),
  text: 'good first issue',
  id: 3
}, {
  leadingVisual: getColorCircle('#ffd78e'),
  text: 'design',
  id: 4
}, {
  leadingVisual: getColorCircle('#ff0000'),
  text: 'blocker',
  id: 5
}, {
  leadingVisual: getColorCircle('#a4f287'),
  text: 'backend',
  id: 6
}, {
  leadingVisual: getColorCircle('#8dc6fc'),
  text: 'frontend',
  id: 7
}];

function MultiSelectStory() {
  const [selected, setSelected] = _react.default.useState([items[0], items[1]]);

  const [filter, setFilter] = _react.default.useState('');

  const filteredItems = items.filter(item => item.text.toLowerCase().startsWith(filter.toLowerCase()));
  const [open, setOpen] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", null, "Multi Select Panel"), /*#__PURE__*/_react.default.createElement("div", null, "Please select labels that describe your issue:"), /*#__PURE__*/_react.default.createElement(_SelectPanel.SelectPanel, {
    renderAnchor: ({
      children,
      'aria-labelledby': ariaLabelledBy,
      ...anchorProps
    }) => /*#__PURE__*/_react.default.createElement(_DropdownMenu.DropdownButton, _extends({
      "aria-labelledby": ` ${ariaLabelledBy}`
    }, anchorProps), children !== null && children !== void 0 ? children : 'Select Labels'),
    placeholderText: "Filter Labels",
    open: open,
    onOpenChange: setOpen,
    items: filteredItems,
    selected: selected,
    onSelectedChange: setSelected,
    onFilterChange: setFilter,
    showItemDividers: true,
    overlayProps: {
      width: 'small',
      height: 'xsmall'
    }
  }));
}

MultiSelectStory.storyName = 'Multi Select';

function SingleSelectStory() {
  const [selected, setSelected] = _react.default.useState(items[0]);

  const [filter, setFilter] = _react.default.useState('');

  const filteredItems = items.filter(item => item.text.toLowerCase().startsWith(filter.toLowerCase()));
  const [open, setOpen] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", null, "Single Select Panel"), /*#__PURE__*/_react.default.createElement("div", null, "Please select a label that describe your issue:"), /*#__PURE__*/_react.default.createElement(_SelectPanel.SelectPanel, {
    renderAnchor: ({
      children,
      'aria-labelledby': ariaLabelledBy,
      ...anchorProps
    }) => /*#__PURE__*/_react.default.createElement(_DropdownMenu.DropdownButton, _extends({
      "aria-labelledby": ` ${ariaLabelledBy}`
    }, anchorProps), children !== null && children !== void 0 ? children : 'Select Labels'),
    placeholderText: "Filter Labels",
    open: open,
    onOpenChange: setOpen,
    items: filteredItems,
    selected: selected,
    onSelectedChange: setSelected,
    onFilterChange: setFilter,
    showItemDividers: true,
    overlayProps: {
      width: 'small',
      height: 'xsmall'
    }
  }));
}

SingleSelectStory.storyName = 'Single Select';