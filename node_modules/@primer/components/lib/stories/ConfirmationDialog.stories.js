"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShorthandHookFromActionMenu = exports.ShorthandHook = exports.BasicConfirmationDialog = exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = require("..");

var _ConfirmationDialog = require("../Dialog/ConfirmationDialog");

var _ActionMenu = require("../ActionMenu");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  title: 'Internal components/ConfirmationDialog',
  component: _ConfirmationDialog.ConfirmationDialog,
  decorators: [Story => {
    // Since portal roots are registered globally, we need this line so that each storybook
    // story works in isolation.
    return /*#__PURE__*/_react.default.createElement(_.ThemeProvider, null, /*#__PURE__*/_react.default.createElement(_.BaseStyles, null, /*#__PURE__*/_react.default.createElement(Story, null)));
  }]
};
exports.default = _default;

const BasicConfirmationDialog = () => {
  const [isOpen, setIsOpen] = (0, _react.useState)(false);
  const buttonRef = (0, _react.useRef)(null);
  const onDialogClose = (0, _react.useCallback)(() => setIsOpen(false), []);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_.Button, {
    ref: buttonRef,
    onClick: () => setIsOpen(!isOpen)
  }, "Show dialog"), isOpen && /*#__PURE__*/_react.default.createElement(_ConfirmationDialog.ConfirmationDialog, {
    title: "Delete universe?",
    onClose: onDialogClose,
    confirmButtonContent: "Delete it!",
    confirmButtonType: "danger"
  }, "Deleting the universe could have disastrous effects, including but not limited to destroying all life on Earth."));
};

exports.BasicConfirmationDialog = BasicConfirmationDialog;

const ShorthandHook = () => {
  const confirm = (0, _ConfirmationDialog.useConfirm)();
  const {
    theme
  } = (0, _.useTheme)();
  const onButtonClick = (0, _react.useCallback)(async event => {
    if ((await confirm({
      title: 'Are you sure?',
      content: 'Do you really want to turn this button green?'
    })) && event.target instanceof HTMLElement) {
      var _theme$colors$auto$gr;

      event.target.style.backgroundColor = (_theme$colors$auto$gr = theme === null || theme === void 0 ? void 0 : theme.colors.auto.green[3]) !== null && _theme$colors$auto$gr !== void 0 ? _theme$colors$auto$gr : 'green';
      event.target.textContent = "I'm green!";
    }
  }, [confirm, theme]);
  return /*#__PURE__*/_react.default.createElement(_.Flex, {
    flexDirection: "column",
    alignItems: "flex-start"
  }, /*#__PURE__*/_react.default.createElement(_.Button, {
    mb: 2,
    onClick: onButtonClick
  }, "Turn me green!"), /*#__PURE__*/_react.default.createElement(_.Button, {
    mb: 2,
    onClick: onButtonClick
  }, "Turn me green!"), /*#__PURE__*/_react.default.createElement(_.Button, {
    mb: 2,
    onClick: onButtonClick
  }, "Turn me green!"), /*#__PURE__*/_react.default.createElement(_.Button, {
    mb: 2,
    onClick: onButtonClick
  }, "Turn me green!"));
};

exports.ShorthandHook = ShorthandHook;
ShorthandHook.displayName = "ShorthandHook";

const ShorthandHookFromActionMenu = () => {
  const confirm = (0, _ConfirmationDialog.useConfirm)();
  const [text, setText] = (0, _react.useState)('open me');
  const onButtonClick = (0, _react.useCallback)(async () => {
    if (await confirm({
      title: 'Are you sure?',
      content: 'Do you really want to do a trick?'
    })) {
      setText('tada!');
    }
  }, [confirm]);
  return /*#__PURE__*/_react.default.createElement(_.Flex, {
    flexDirection: "column",
    alignItems: "flex-start"
  }, /*#__PURE__*/_react.default.createElement(_ActionMenu.ActionMenu, {
    renderAnchor: props => /*#__PURE__*/_react.default.createElement(_.Button, props, text),
    items: [{
      text: 'Do a trick!',
      onAction: onButtonClick
    }]
  }));
};

exports.ShorthandHookFromActionMenu = ShorthandHookFromActionMenu;
ShorthandHookFromActionMenu.displayName = "ShorthandHookFromActionMenu";